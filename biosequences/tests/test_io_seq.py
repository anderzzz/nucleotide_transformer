'''Bla bla

'''
from Bio.SeqRecord import SeqRecord
from torch.utils.data import DataLoader

from biosequences.io import NucleotideSequenceDataset, NucleotideSequencePhrasesDataset

TEST_DATA = './tests_data/'
SEQ_ON_RECORD = 'AGGACGAACGCTGGCGGCGTGCTTAACACATGCAAGTCGAACGAGAGGACATGAAAAGCTTGCTTTTTATGAAATCTAGTGGCAAACGGGTGAGTAAC' + \
                'ACGTAAACAACCTGCCTTCAAGATGGGGACAACAGACGGAAACGACTGCTAATACCGAATACGATCCGAAAGTCGCATGACATTCGGATGAAAGGGTG' + \
                'GCCTATCGAAGAAGCTATCGCTTGAAGAGGGGTTTGCGTCCGATTAGGTAGTTGGTGAGGTAACGGCCCACCAAGCCGACGATCGGTAGCCGGTCTGA' + \
                'GAGGATGAACGGCCACACTGGAACTGAGACACGGTCCAGACTCCTACGGGAGGCAGCAGTGGGGAATCTTCCGCAATGGACGAAAGTCTGACGGAGCA' + \
                'ACGCCGCGTGAGTGAAGACGGCCTTCGGGTTGTAAAGCTCTGTGATTCGGGACGAAAGGCCATATGTGAATAATATATGGAAATGACGGTACCGAAAA' + \
                'AGCAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTGTCCGGAATTATTGGGCGTAAAGCGCGCGCAGGCGGTCTC' + \
                'TTAAGTCCATCTTAGAAGTGCGGGGCTTAACCCCGTGAGGGGATGGAAACTGGGAGACTGGAGTATCGGAGAGGAAAGTGGAATTCCTAGTGTAGCGG' + \
                'TGAAATGCGTAGATATTAGGAAGAACACCGGTGGCGAAGGCGACTTTCTGGACGAAAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGGATT' + \
                'AGATACCCTGGTAGTCCACGCCGTAAACGATGGATACTAGGTGTAGGAGGTATCGACCCCTTCTGTGCCGGAGTTAACGCAATAAGTATCCCGCCTGG' + \
                'GAAGTACGATCGCAAGATTAAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGAGTATGTGGTTTAATTCGACGCAACGCGAAGAACCTTAC' + \
                'CAAGTCTTGACATTGATCGCCATTCCAAGAGATTGGAAGTTCTCCTTCGGGAGACGAGAAAACAGGTGGTGCACGGCTGTCGTCAGCTCGTGTCGTGA' + \
                'GATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCCTATCTTTTGTTGCCAGCACGTAGAGGTGGGAACTCAGAAGAGACCGCCGCAGACAATGCGGAG' + \
                'GAAGGTGGGGATGACGTCAAGTCATCATGCCCCCTATGACCTGGGCTACACACGTGCTACAATGGACGGTACAACGAGAAGCGACCCTGTGAAGGCAA' + \
                'GCGGATCTCTGAAAGCCGTTCTCAGTTCGGATTGCAGGCTGCAACTCGCCTGCATGAAGCTGGAATCGCTAGTAATCGCAAATCAGCACGTTGCGGTG' + \
                'AATACGTTCCCGGGCCTTGTACACACCGCCCGTCACACCA'
SEQ_ON_RECORD_PHRASE_LEN = 4 * (len(SEQ_ON_RECORD) - 2) - 1


def test_simple_read():
    data = NucleotideSequenceDataset(TEST_DATA)
    assert len(data) == 1

    dloader = DataLoader(data)
    for dd in dloader:
        assert dd['seq'][0] == SEQ_ON_RECORD

def test_full_record_read():
    data = NucleotideSequenceDataset(TEST_DATA, output_record_filter_func='full_record')
    assert len(data) == 1

    assert isinstance(data[0]['record'], SeqRecord)
    assert data[0]['record'].seq.__str__() == SEQ_ON_RECORD

def test_phrase_read():
    data = NucleotideSequencePhrasesDataset(TEST_DATA, word_length=3, stride=1)
    assert len(data) == 1

    dloader = DataLoader(data)
    for dd in dloader:
        assert len(dd['seq_phrase'][0]) == SEQ_ON_RECORD_PHRASE_LEN
        assert dd['seq_phrase'][0][-3:] == SEQ_ON_RECORD[-3:]
        assert dd['seq_phrase'][0][:3] == SEQ_ON_RECORD[:3]


if __name__ == '__main__':
    test_simple_read()
    test_full_record_read()
    test_phrase_read()